name: build

# Run Workflow manually or on push to master
on:
  push:
    tags:
      - 'rc-*'
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy: 
      matrix:
        os: [ ubuntu-latest ]
        # os: [ ubuntu-latest, macos-latest, windows-latest ]
        python-version: [ '3.8' ]
        # python-version: ['3.8', '3.10']
        
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        name: Checkout commit
      
      # Install Python
      - uses: actions/setup-python@v2
        name: Setup Python
        with: 
          python-version: ${{ matrix.python-version }}
          architecture: 'x64'

      # Display the version for the sake of it
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      # Install all necessary requirements from requirements.txt
      - name: Install dependencies
        run: pip install -r requirements.txt

      # Build the application with pyinstaller (results go in dist/main/)
      - name: Build application
        run: pyinstaller main.py

      # Create a Zip file from the installer package
      - name: Create zip
        uses: thedoctor0/zip-release@master
        with: 
          type: 'zip'
          filename: release-${{ matrix.os }}-py${{ matrix.python-version }}.zip
          path: 'dist/main/'

      # Add package to archive so we can inspect it
      - name: Archive artifact
        uses: actions/upload-artifact@v2
        with: 
          name: release-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/main/

      # Get current date and time
#      - name: Get current date
#        id: date
#        run: echo "::set-output name=date::$(date +'%Y-%m-%-dT%H-%M')"

      # Publish as release
      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          artifacts: release-*.zip
          artifactContentType: application/zip
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true

      # Create a release to add the files to
#      - name: Create release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: r${{ steps.date.outputs.date }}
#          release_name: Release ${{ steps.date.outputs.date }}
#          body: |
#            Compilation of new features
#          prerelease: false

#      - name: Upload release asset
#        uses: actions/upload-release-asset@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          upload_url: ${{ steps.create_release.outputs.upload_url }}
#          asset_path: release-${{ matrix.os }}-py${{ matrix.python-version }}.zip
#          asset_name: release-${{ matrix.os }}-${{ matrix.python-version }}.zip
#          asset_content_type: application/zip
          
#      - name: Publish release
#        uses: StuYarrow/publish-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          id: ${{ steps.create_release.outputs.id }}
